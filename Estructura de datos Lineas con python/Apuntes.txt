Introducción:
	Elementos en Python
	Colecciones
	Tipos y operaciones
Estructura de datos lineales:
	Arrays
	Nodes
	Linked lists
	Stacks
	Queues


:::: COLECCIONES ::::
Son estructuras de datos.
Es un conjunto de cero o más elementos que pueden tratarse como una unidad conceptual.

Tipos de colecciones: Son principales 2
Dinámicas: Pueden crecer o disminuir su tamaño
Inmutables: No cambian

Podemos encontrar Estructuras Lineales.
-Son ordenadas por posición.
-Solo el primer elemento NO tiene predecesor.
Ejemplo:
	Fila Supermercado
	Pila de platos
	Checklist.

Podemos encontrar Estructuras Jerárquicas
-Ordenadas como un árbol invertido
-Solo el primer elemento no tiene predecesor
-Padres e hijos.
Ejemplo:
	Sistema de directorios.
	Indices de libros.

Podemos encontrar Estructuras Grafos:
-Cada dato puede tener varios predecesores y sucesores
-Estos se llaman vecinos.
Ejemplo:
	Vuelos de aviones que donde un destino puede estar conectado a mas destinos.

Encontramos Estructuras desordenadas:
-No tienen orden particular
-No hay predecesores o sucesores
Ejemplo:
 	Bolsa de Canicas.

Encontramos Estructuras ordenadas:
-Impone un orden con una regla.
-item(i) <= item(I+1)

OPERACIONES:::
Tienen las siguientes caracteristicas
Tamaño, pertenencia, recorrido, string, igualdad.
Concatenación, Conversión de tipo, Insertar, Remover, Remplazar, Acceder.



::::ARRAY DE DOS DIMENSIONES::::
Son los arreglos que son tipo tabla.



::::: LINKED STRUCTURES :::::

- Consiste de nodos conectados a otros
- Los más comunes son sencillos o dobles
- No se accede por indice sino por recorrido.

Conceptos:
- Data -> Valor que se alberga En el nodo 
- Next -> referencia al siguiente nodo.
- Previeus -> referencia al nodo anterior.
- Head -> primer nodo
- Tail -> último nodo.

Sirven para:

- Crear estructuras de datos más complejos
- Como los stacks o queues
- Optimización

El problema es:
NO maneja indices, hay que simularlos


:::::::STACKS:::::
Son colecciones lineales, que están basados en arrays o linklist
Su principio fundamental es el LIFO: (Last in first-out) -> el primer elemento en llegar es el primero en salir.
Tiene los métodos PUSH -> para añadir , POP-> para remover el elemento que está encima.
TOP -> para saber cual es el primer elemento
BOTTOM -> para saber cual es el último elemento.

OPERACIONES O APLICACIONES:
Convertir una operación en infix -> operaciones aritméticas por ejemplo 4x(5-(7+2))
Postfix -> como ordenar los operadnos de los aritméticos.

APLICACIONES:
Los stacks tiene la posibilidad de invertir el orden de una lista.
Implementar "undo" -> para rehacer o rollback.
Mantener historiales de navegadores web.
Hacer backtracking para hacer un recorrido de inicio a fin


NOTA:
No son iguales a las listas, son similares


:::::QUEUES::::::
SON LAS COLAS
También cumple el principio FIFO (First in, First-out)
-Concepto:
REAR: El último elemento que entro
FRONT: El primer elemento que será atendido.
PRIORITY QUEUES -> Funcionan con mayor prioridad.













